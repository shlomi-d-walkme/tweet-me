/* tslint:disable */
/* eslint-disable */
/**
 * follows API
 * Following/followers information and actions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FollowersDto
 */
export interface FollowersDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof FollowersDto
     */
    followers: Array<string>;
}
/**
 * 
 * @export
 * @interface FollowingDto
 */
export interface FollowingDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof FollowingDto
     */
    following: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} profileId 
         * @param {string} followProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerFollow: async (profileId: string, followProfileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('followsControllerFollow', 'profileId', profileId)
            // verify required parameter 'followProfileId' is not null or undefined
            assertParamExists('followsControllerFollow', 'followProfileId', followProfileId)
            const localVarPath = `/api/follows/{profileId}/follow/{followProfileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"followProfileId"}}`, encodeURIComponent(String(followProfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerGetFollowersByUser: async (profileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('followsControllerGetFollowersByUser', 'profileId', profileId)
            const localVarPath = `/api/follows/{profileId}/followers`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerGetFollowingByUser: async (profileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('followsControllerGetFollowingByUser', 'profileId', profileId)
            const localVarPath = `/api/follows/{profileId}/following`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profileId 
         * @param {string} unfollowProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerUnfollow: async (profileId: string, unfollowProfileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('followsControllerUnfollow', 'profileId', profileId)
            // verify required parameter 'unfollowProfileId' is not null or undefined
            assertParamExists('followsControllerUnfollow', 'unfollowProfileId', unfollowProfileId)
            const localVarPath = `/api/follows/{profileId}/follow/{unfollowProfileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"unfollowProfileId"}}`, encodeURIComponent(String(unfollowProfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} profileId 
         * @param {string} followProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followsControllerFollow(profileId: string, followProfileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followsControllerFollow(profileId, followProfileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followsControllerGetFollowersByUser(profileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followsControllerGetFollowersByUser(profileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followsControllerGetFollowingByUser(profileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followsControllerGetFollowingByUser(profileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profileId 
         * @param {string} unfollowProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followsControllerUnfollow(profileId: string, unfollowProfileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followsControllerUnfollow(profileId, unfollowProfileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {string} profileId 
         * @param {string} followProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerFollow(profileId: string, followProfileId: string, options?: any): AxiosPromise<FollowingDto> {
            return localVarFp.followsControllerFollow(profileId, followProfileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerGetFollowersByUser(profileId: string, options?: any): AxiosPromise<FollowersDto> {
            return localVarFp.followsControllerGetFollowersByUser(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerGetFollowingByUser(profileId: string, options?: any): AxiosPromise<FollowingDto> {
            return localVarFp.followsControllerGetFollowingByUser(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profileId 
         * @param {string} unfollowProfileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followsControllerUnfollow(profileId: string, unfollowProfileId: string, options?: any): AxiosPromise<FollowingDto> {
            return localVarFp.followsControllerUnfollow(profileId, unfollowProfileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {string} profileId 
     * @param {string} followProfileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public followsControllerFollow(profileId: string, followProfileId: string, options?: any) {
        return DefaultApiFp(this.configuration).followsControllerFollow(profileId, followProfileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public followsControllerGetFollowersByUser(profileId: string, options?: any) {
        return DefaultApiFp(this.configuration).followsControllerGetFollowersByUser(profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public followsControllerGetFollowingByUser(profileId: string, options?: any) {
        return DefaultApiFp(this.configuration).followsControllerGetFollowingByUser(profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profileId 
     * @param {string} unfollowProfileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public followsControllerUnfollow(profileId: string, unfollowProfileId: string, options?: any) {
        return DefaultApiFp(this.configuration).followsControllerUnfollow(profileId, unfollowProfileId, options).then((request) => request(this.axios, this.basePath));
    }
}


