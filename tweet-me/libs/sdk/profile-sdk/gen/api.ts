/* tslint:disable */
/* eslint-disable */
/**
 * Profile service APIs
 * becouse omry is making us do this.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * user id
     * @type {string}
     * @memberof Profile
     */
    id: string;
    /**
     * user name
     * @type {string}
     * @memberof Profile
     */
    userName: string;
    /**
     * first name
     * @type {string}
     * @memberof Profile
     */
    firstName: string;
    /**
     * last name
     * @type {string}
     * @memberof Profile
     */
    lastName: string;
    /**
     * password
     * @type {string}
     * @memberof Profile
     */
    passward: string;
    /**
     * the date when the profile was created
     * @type {string}
     * @memberof Profile
     */
    creationDate: string;
    /**
     * user email
     * @type {string}
     * @memberof Profile
     */
    email: string;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    email: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sqwagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetSwagger: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/omry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary profile of a given user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProfile', 'id', id)
            const localVarPath = `/api/profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary return all avilable profiles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfiles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary register a new twitter profile.
         * @param {ProfileDto} profileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (profileDto: ProfileDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileDto' is not null or undefined
            assertParamExists('register', 'profileDto', profileDto)
            const localVarPath = `/api/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary sqwagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetSwagger(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetSwagger(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary profile of a given user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary return all avilable profiles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfiles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary register a new twitter profile.
         * @param {ProfileDto} profileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(profileDto: ProfileDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(profileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary sqwagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetSwagger(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetSwagger(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary profile of a given user by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(id: string, options?: any): AxiosPromise<Profile> {
            return localVarFp.getProfile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary return all avilable profiles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfiles(options?: any): AxiosPromise<void> {
            return localVarFp.getProfiles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary register a new twitter profile.
         * @param {ProfileDto} profileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(profileDto: ProfileDto, options?: any): AxiosPromise<void> {
            return localVarFp.register(profileDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary sqwagger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetSwagger(options?: any) {
        return DefaultApiFp(this.configuration).appControllerGetSwagger(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary profile of a given user by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getProfile(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary return all avilable profiles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfiles(options?: any) {
        return DefaultApiFp(this.configuration).getProfiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary register a new twitter profile.
     * @param {ProfileDto} profileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(profileDto: ProfileDto, options?: any) {
        return DefaultApiFp(this.configuration).register(profileDto, options).then((request) => request(this.axios, this.basePath));
    }
}


